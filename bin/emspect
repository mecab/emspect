#!/usr/bin/env node

"use strict";

var path = require('path');
var program = require('commander');
var Enumerable = require('linq');
var msg = require('emoji-logger');

var emspect = require(path.join(__dirname, '../', 'index'));
var Emojis = emspect.Emojis;

require('epipebomb')(); // suppress `write EPIPE` error
var query;
var noLongHelp = false;

function collect(val, memo) {
    memo.push(val);
    return memo;
}

program
    .version('1.0.4')
    .arguments('[query]')
    .action((query_) => {
        query = query_;
    })
    .option('-c, --code <code>',
            'search by code (ex. U+0030 U+20E3)', collect, [])
    .option('-C, --char <char>',
            'search by character (ex. 0Ô∏è‚É£)', collect, [])
    .option('-n, --name <name>',
            'search by name (ex. Keycap DIGIT ZERO)', collect, [])
    .option('-a, --annotations <annotations>',
            'search by annotations (ex. keycap)', collect, [])
    .option('-g, --gfm <gfm>',
            'search by GitHub Flavored Markdown (GFM) style emoji code (ex. :+1: or +1)', collect, [])
    .option('-G, --gfm-startswith <gfm-startswith>',
            'like gfm, but conduct forward match', collect, [])
    .option('-f, --format <format>', 'Specify output format. Available specifiers: %c, %C, %n, %y, %d, %a, %g, %G. The details are is shown by `emspect --help`', String)
    .option('--update', '‚ö†Ô∏è update emoji database (requires internet connection) ‚ö†Ô∏è')
    .on('--help', () => {
        if (noLongHelp) {
            return;
        }
        console.log("  Format Specifiers:");
        console.log("");
        console.log("    %c\t\tExtracted to `code`, e.g. `U+1F62A`");
        console.log("    %C\t\tExtracted to `chars`, e.g. `üò™`");
        console.log("    %n\t\tExtracted to `name`, e.g. `SLEEPY FACE`");
        console.log("    %a\t\tExtracted to `annotations`, Comma (with space) separated, e.g. `+1, body, hand, person, thumb, thumbs up, up`");
        console.log("    %g\t\tExtracted to `gfm`, Comma (with space) separated, e.g. `+1, thumbsup`");
        console.log("    %G\t\tSimilar to `gfm`, but adds colons, e.g. `:+1:, :thumbsup:``");
        console.log("    %y\t\tExtracted to `year`, `2010 ≤ ∑`");
        console.log("    %d\t\tExtracted to `default presentation style`, `emoji`");
        console.log();
        console.log("    Special Format Type:");
        console.log("");
        console.log("    -f json\tOutput as JSON");
        console.log("    -f all\tPrint all data with tab-saparated. Same to -f %c\\t%C\\t%n\\t%y\\t%d\\t%a\\t%G");
        console.log("");
        console.log("  Examples:");
        console.log("");
        console.log("    emspect");
        console.log("    => Show all emojis");
        console.log("");
        console.log("    emspect sleep");
        console.log("    => Show emojis with `sleep` in annotations");
        console.log("");
        console.log("    emspect U+1F62A --format json");
        console.log("    => Show emojis with code `U+1F62A`. Output as JSON");
        console.log("");
        console.log('    emspect "üàÅ" --format "%C %G"');
        console.log("    => Show GFM style emoji code of `üàÅ`");
        console.log("");
        console.log("    emspect -n WHITE -a symbol");
        console.log("    => Show emojis contains `WHITE` in name and have `symbol` in annotations");
        console.log("");
        console.log("    (emspect -a man -a person & emspect -a woman -a person) | sort | uniq");
        console.log("    => Or-search example with sub-shell. Show emojis which has `(man AND person) OR (woman AND person)` for annotaions");
        console.log("");
    })
    .parse(process.argv);

// COMMANDER HACK
// --------------
// Due to a conflict with commander's built-in property, the query is not parsed
// if `query === "name"`. In this case, somehow `program.name` is `[ [] ]`,
// so we overwrite the property and the variable with checking that 'name' in
// argv, just in case.

// Note `rawArgs[0]` is Node path. `rawArgs[1]` is the path of this script.
if (program.name[0] && program.name[0].length === 0 && program.rawArgs.indexOf('name') > 1) {
    query = 'name';
    program.name = [];
}

function isAnyNamedQuery() {
    return program.code + program.char + program.name + program.annotations + program.gfm + program.gfmStartswith;
}

function print(results) {
    if (program.format === "json") {
        var json = JSON.stringify(
            Enumerable.from(results)
                .select((e) => { return e.toData(); })
                .toArray()
        );
        console.log(json);
    }
    else {
        Enumerable.from(results)
            .select((e) => { return e.format(program.format); })
            .forEach((e) => {
                console.log(e);
            });
    }
}

(function () {
    var emojis;
    if (program.update) {
        emspect.update()
            .catch(() => {
                process.exit(-1);
            });
        return;
    }

    try {
        emojis = Emojis.createFromDefaultDataSync();
    }
    catch (ex){
        msg('Could not read data.', 'error');
        msg(ex.message, 'error');
        process.exit(-1);
    }

    var results;

    if (query && isAnyNamedQuery()) {
        console.log();
        msg("`query` cannot specified if -c, -C, -n, -a, -g or -G is given", 'error');
        noLongHelp = true;
        program.outputHelp();
        process.exit(-1);
    }
    else if (!query && !isAnyNamedQuery()) {
        // No query
        // ----------------------------
        // Return all emojis.

        results = emojis.all();
    }
    else if (query) {
        // Lazy query
        // ----------

        results = emojis.search(query);
    }
    else { // => !query && isAnyNamedQuery()
        // Context specified queries
        // -------------------------
        // Conduct and-search if multiple query is given.

        program.code.forEach((arg) => {
            var r = emojis.searchByCode(arg);
            results = !results ? Enumerable.from(r) :
                results.intersect(r, "$.chars");
        });

        program.char.forEach((arg) => {
            var r = emojis.searchByChars(arg);
            results = !results ? Enumerable.from(r) :
                results.intersect(r, "$.chars");
        });

        program.name.forEach((arg) => {
            var r = emojis.searchByName(arg);
            results = !results ? Enumerable.from(r) :
                results.intersect(r, "$.chars");
        });

        program.annotations.forEach((arg) => {
            var argsAry = arg.split(/, */);
            var r = emojis.searchByAnnotations.apply(emojis, argsAry);
            results = !results ? Enumerable.from(r) :
                results.intersect(r, "$.chars");
        });

        program.gfm.forEach((arg) => {
            var r = emojis.searchByShortcode(arg);
            results = !results ? Enumerable.from(r) :
                results.intersect(r, "$.chars");
        });

        program.gfmStartswith.forEach((arg) => {
            var r = emojis.searchByShortcodeStartsWith(arg);
            results = !results ? Enumerable.from(r) :
                results.intersect(r, "$.chars");
        });
        results = results.toArray();
    }

    print(results);
})();
